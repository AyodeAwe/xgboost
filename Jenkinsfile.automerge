@Library('shared-libs') _

pipeline {
    agent any

    triggers { cron('H 3 * * *') }

    parameters {
        string(name: 'SOURCE_BRANCH', defaultValue: 'cudf-interop')
        string(name: 'TARGET_BRANCH', defaultValue: 'nv-cudf-interop')
        string(name: 'REF', defaultValue: 'nv-cudf-interop')
    }

    stages {
        stage('Update Branch') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId:'svcngcc_pubpriv', keyFileVariable: 'SSH_KEY_FILE_PATH')]) {
                    withEnv(["GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no -i ${env.SSH_KEY_FILE_PATH}"]) {
                        script {
                            List<String> sourceChanged =
                                sh(returnStdout: true, script: "git diff --name-only origin/${params.SOURCE_BRANCH}..origin/${params.TARGET_BRANCH}").split()

                            if (sourceChanged.size()>0) {
                                echo "Changed files: ${sourceChanged}"
                                sh "git checkout ${params.TARGET_BRANCH}"
                                sh "git merge origin/${params.SOURCE_BRANCH}"
                                sh "git push origin ${params.TARGET_BRANCH}"
                            }
                            else{
                                echo "${params.TARGET_BRANCH} and ${params.SOURCE_BRANCH} match"
                            }
                        }
                    }
                }
            }
        }
    }

  post {
      always {
          deleteDir() /* clean up our workspace */

          script {
              def status = "failed"
              if (currentBuild.currentResult == "SUCCESS") {
                status = "success"
                slack("#rapidsai-spark-cicd", "Success", color:"#33CC33")
              }
              updateGitlabCommitStatus(name: 'Jenkins CI', state: status)
              slack("#rapidsai-spark-cicd", "Failed", color:"#FF0000")
          }
      }
  }
}
