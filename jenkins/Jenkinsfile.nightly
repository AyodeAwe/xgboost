#!/usr/bin/groovy
@Library('shared-libs') _

// -*- mode: groovy -*-
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

import groovy.transform.Field

/* Unrestricted tasks: tasks that do NOT generate artifacts */

// Command to run command inside a docker container
def dockerRun = 'tests/ci_build/ci_build_spark.sh'
// Utility functions
@Field
def utils

def buildMatrix = [
    [ "enabled": true, "buildCmd": "build_jvm_deploy.sh", "cudaVersion": "10.0", "dockerTarget": "sparkgpu"],
    [ "enabled": true, "buildCmd": "build_jvm_deploy.sh", "cudaVersion": "9.2", "dockerTarget": "sparkgpu"],
    [ "enabled": true, "buildCmd": "build_jvm_deploy_centos7.sh", "cudaVersion": "10.0", "dockerTarget": "gpu_centos7"],
    [ "enabled": true, "buildCmd": "build_jvm_deploy_centos7.sh", "cudaVersion": "9.2", "dockerTarget": "gpu_centos7"],
]

pipeline {
    agent any

//    environment {
//        DOCKER_CACHE_REPO = 'apt-sh04.nvidia.com:5005'
//    }

    // Setup common job properties
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        gitLabConnection('GitLab Master')
    }

    parameters {
        string(name: 'REF', defaultValue: 'nv-cudf-interop', description: 'Commit to build')
    }

    triggers {
        cron('H 0 * * *')
    }

    // Build stages
    stages {
        stage('Jenkins: Get sources') {
            steps {
                updateGitlabCommitStatus(name: 'Jenkins CI', state: 'running')
                script {
                    utils = load('tests/ci_build/jenkins_tools_spark.Groovy')
                    utils.checkoutSrcs()
                }
                stash name: 'srcs', excludes: '.git/'
                milestone label: 'Sources ready', ordinal: 1
            }
        }
        stage('Jenkins: Build & Test') {
            steps {
                script {
                    echo 'run buildFactory'
                    buildPlatformCmake(buildMatrix[0], "docker-gpu")
                    buildPlatformCmake(buildMatrix[1], "docker-gpu")
                    buildPlatformCmake(buildMatrix[2], "docker-gpu")
                    buildPlatformCmake(buildMatrix[3], "docker-gpu")
                }
            }
        }
    }
    post {
        always {
            script {
                def status = "failed"
                if (currentBuild.currentResult == "SUCCESS") {
                  status = "success"
                  slack("#rapidsai-spark-cicd", "Success", color:"#33CC33")
                }
                updateGitlabCommitStatus(name: 'Jenkins CI', state: status)
                slack("#rapidsai-spark-cicd", "Failed", color:"#FF0000")
            }
        }
    }
}

/**
 * Build platform and test it via cmake.
 */
def buildPlatformCmake(conf, nodeReq) {
    // Destination dir for artifacts
    echo 'Begin buildPlatformCmake'
    def dockerArgs = ""
    def buildCommand = "tests/ci_build/" + conf["buildCmd"]
    def dockerTarget = conf["dockerTarget"]
    dockerArgs = "--build-arg CUDA_VER=" + conf["cudaVersion"]
    buildCommand = buildCommand + " " + conf["cudaVersion"]
    echo "build command: ${buildCommand}"
    // Build node - this is returned result
    retry(1) {
        node(nodeReq) {
            unstash name: 'srcs'
            echo """
            |===== XGBoost Spark  build =====
            |  dockerTarget: ${dockerTarget}
            |=========================
            """.stripMargin('|')
            // Invoke command inside docker
            if ("${dockerTarget}" == "gpu_centos7") {
                sh """
                ${dockerRun} ${dockerTarget} ${dockerArgs} scl enable devtoolset-7 '${buildCommand}'
                """
            } else {
                sh """
                ${dockerRun} ${dockerTarget} ${dockerArgs} /bin/bash -i ${buildCommand}
                """
            }
        }
    }
}

